#user dao
users.get.by.activity=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id join users_activities on users_activities.user_id = u.id and users_activities.activities_id = ? GROUP BY id,email, name, password
user.add=INSERT INTO users (email, password, name) VALUES (?, ?, ?)
user.get.email=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id WHERE u.email = ? GROUP BY id,email, name, password
user.get.all=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id GROUP BY id,email, name, password
user.get.id=SELECT u.id, u.email, u.name, u.password, string_agg(cast(r.role as Varchar), ', ') as roles FROM users as u join user_roles as r on u.id = r.user_id WHERE u.id = ? GROUP BY id,email, name, password
#user_roles dao
role.add=INSERT INTO user_roles(user_id, role) VALUES (?, ?)
#activity dao
activity.all.count=SELECT COUNT(*) FROM activities join users_activities on users_activities.activities_id = activities.id and users_activities.user_id = ?
activity.get.all=SELECT * FROM activities join users_activities on users_activities.activities_id = activities.id and users_activities.user_id = ? LIMIT ? OFFSET ?
activity.get.all.full=SELECT * FROM activities join users_activities on users_activities.activities_id = activities.id and users_activities.user_id = ?
activity.get.all.active.full=SELECT activities.id, activities.name, activities.opening_time, activities.closing_time, activities.status FROM activities where id!=all(SELECT activities_id from users_activities WHERE user_id = ?) and status ='ACTIVE'
activity.get.id=SELECT * from activities WHERE id = ?
activity.get.all.active=SELECT activities.id, activities.name, activities.opening_time, activities.closing_time, activities.status FROM activities where id!=all(SELECT activities_id from users_activities WHERE user_id = ?) and status ='ACTIVE' LIMIT ? OFFSET ?
activity.active.count=SELECT COUNT(*) FROM activities where id!=all(SELECT activities_id from users_activities WHERE user_id = ?) and status ='ACTIVE'
activity.create=INSERT INTO activities (name, opening_time, status) VALUES (?, ?, ?)
activity.update=UPDATE activities SET status = ? WHERE id = ?
activity.add.user=INSERT INTO users_activities(user_id, activities_id) VALUES (?, ?)
activity.delete=DELETE FROM activities where id = ?
activity.delete.user=DELETE FROM users_activities where user_id = ? and activities_id = ?;
#log dao
log.get.id=SELECT * FROM activities_logs WHERE id = ?
log.get.all=SELECT * FROM activities_logs
log.add=INSERT INTO activities_logs (activity_id, user_id, start_time, end_time) VALUES(?, ?, ?, ?)
log.update=UPDATE activities_logs SET activity_id = ?, user_id = ?, start_time = ?, end_time = ? WHERE id = ?
log.remove=DELETE FROM activities_logs where id = ?
log.get.by.user=SELECT * from activities_logs where user_id = ?;
log.get.by.user.pages=SELECT * from activities_logs where user_id = ? LIMIT ? OFFSET ?
log.get.by.user.count=SELECT COUNT(*) from activities_logs where user_id = ?;
log.get.by.user.and.activity=SELECT * from activities_logs where user_id = ? and activity_id = ?;
log.get.by.user.and.activity.pages=SELECT * from activities_logs where user_id = ? and activity_id = ? LIMIT ? OFFSET ?
log.get.by.user.and.activity.count=SELECT COUNT(*) from activities_logs where user_id = ? and activity_id = ?;
#order dao
order.get.id=SELECT * FROM orders WHERE id = ?
order.get.all=SELECT * FROM orders
order.get.all.pending=SELECT * FROM orders where status = 'PENDING';
order.get.all.pending.pages=SELECT * FROM orders where status = 'PENDING' LIMIT ? OFFSET ?
order.get.all.pending.count=SELECT COUNT(*) FROM orders where status = 'PENDING';
order.get.all.reviewed=SELECT * FROM orders where status != 'PENDING'
order.get.all.reviewed.count=SELECT COUNT(*) FROM orders where status != 'PENDING'
order.get.all.reviewed.pages=SELECT * FROM orders where status != 'PENDING' LIMIT ? OFFSET ?
order.create=INSERT INTO orders (action, activity_id, user_id, status) VALUES (?, ?, ?, ?)
order.remove=DELETE FROM orders WHERE id =?
order.update=UPDATE orders SET status = ? WHERE id = ?
#statistic dao
stats.get=SELECT activity_id, activity_name, activity_status, time FROM public.stats_view where user_id = ?;
stats.get.pages=SELECT activity_id, activity_name, activity_status, time FROM public.stats_view where user_id = ? LIMIT ? OFFSET ?
stats.count=SELECT COUNT(*) FROM public.stats_view where user_id = ?;
